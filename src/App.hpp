#pragma once

// opengl includes
#include <glm/glm.hpp>
#include <glad/glad.h>
#include <GLFW/glfw3.h>

// c++ includes
#include <chrono>
#include <ctime>
#include <iostream>

// project includes
#include "ShaderHandle.hpp"
#include "Scene.hpp"

namespace App {

    static unsigned int screenWidth;
    static unsigned int screenHeight;

    long long timeInMillis();

    /**
     * instance of the application, should only be one
     */
    class App {
        public:
            // ===================================

            GLFWwindow* window = NULL;


            // ===================================
            // glm::mat4 viewPerspectiveMatrix;

            const char *windowTitle = "OpenGL application";

            long long oldTime;

            // ===================================
            // static unsigned int screenWidth;
            // static unsigned int screenHeight;

            // scene is implicitly generated by an app instance
            Scene::Scene scene;

            // ===================================
            /**
             * constructor
             */
            App( int width, int height);
            /**
             * destructor
             */
            ~App();
            // ===================================

            /**
             * direct replacement for int main right now
            */
            int run();

            // ===================================

            int init();

            // ===================================

            void prepareFrame();
            void update();
            void draw();
            void pushChanges();

            // ===================================

            // process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
            // ---------------------------------------------------------------------------------------------------------
            void processInput(GLFWwindow *window);

            // glfw: whenever the window size changed (by OS or user resize) this callback function executes
            // ---------------------------------------------------------------------------------------------------------
            static void framebuffer_size_callback(GLFWwindow* window, int width, int height);
            
            // ===================================
    };
}